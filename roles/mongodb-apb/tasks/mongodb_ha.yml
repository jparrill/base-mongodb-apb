---
- name: "[MONGODB-APB][{{ mode | upper }}] Set service_name fact from APB parameters"
  set_fact:
    service_name: "{{ MONGODB_SERVICE_NAME }}"

- name: "[MONGODB-APB][{{ mode | upper }}] Set to {{ state }} the MongoDB Internal Service"
  k8s_v1_service:
    state: "{{ state }}"
    name: "{{ service_name }}-internal"
    namespace: "{{ namespace }}"
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    cluster_ip: 'None'
    labels:
      app: "{{ service_name }}"
      name: "{{ service_name }}"
    selector:
      app: "{{ service_name }}"
      name: "{{ service_name }}"
    ports:
    - name: "{{ service_name }}-27017"
      port: 27017
      protocol: TCP
      #      target_port: 27017
  register: mongodb_svc_internal

- name: "[MONGODB-APB][{{ mode | upper }}] Set to {{ state }} the MongoDB Service"
  k8s_v1_service:
    state: "{{ state }}"
    name: "{{ service_name }}"
    namespace: "{{ namespace }}"
    labels:
      app: "{{ service_name }}"
      name: "{{ service_name }}"
    selector:
      app: "{{ service_name }}"
      name: "{{ service_name }}"
    ports:
    - name: "{{ service_name }}-27017"
      port: 27017
      protocol: TCP
      #target_port: 27017
  register: mongodb_svc

- name: "[MONGODB-APB][{{ mode | upper }}] Set to {{ state }} the MongoDB HA Statefull Set for HA and plan"
  k8s_v1beta1_stateful_set:
    state: "{{ state }}"
    name: "{{ service_name }}"
    namespace: "{{ namespace }}"
    service_name: "{{ service_name }}"
    labels:
      app: "{{ service_name }}"
      name: "{{ service_name }}"
    replicas: 3
    selector_match_labels:
      app: "{{ service_name }}"
      name: "{{ service_name }}"
    spec_template_metadata_labels:
      app: "{{ service_name }}"
      name: "{{ service_name }}"
    containers:
      - env:
          - name: MONGODB_ADMIN_PASSWORD
            value: "{{ MONGODB_ADMIN_PASSWORD }}"
          - name: MONGODB_PASSWORD
            value: "{{ MONGODB_PASSWORD }}"
          - name: MONGODB_USER
            value: "{{ MONGODB_USER }}"
          - name: MONGODB_DATABASE
            value: "{{ MONGODB_DATABASE }}"
          - name: MONGODB_REPLICA_NAME
            value: "{{ MONGODB_REPLICA_NAME }}"
          - name: MONGODB_KEYFILE_VALUE
            value: "{{ MONGODB_KEYFILE_VALUE }}"
          - name: MONGODB_SERVICE_NAME
            value: "{{ MONGODB_SERVICE_NAME }}-internal"
        name: "{{ service_name }}"
        image: "{{ mongodb_image }}"
        command: ["run-mongod-replication"]
        liveness_probe:
          initial_delay_seconds: 30
          tcp_socket:
            port: 27017
          timeout_seconds: 1
        readiness_probe:
          exec:
            command:
              - "stat"
              - "/tmp/initialized"
          initial_delay_seconds: 3
          timeout_seconds: 1
        ports:
          - container_port: 27017
            protocol: TCP
        volume_mounts:
          - name: "{{ mongodb_data_volume_name }}"
            mount_path: "{{ mongodb_data_path }}"
    spec_volume_claim_templates:
      - metadata:
          name: "{{ mongodb_data_volume_name }}"
        spec:
          access_modes:
            - ReadWriteOnce
          resources:
            requests:
              storage: "{{ MONGODB_DATA_STORAGE_SIZE }}Gi"
    termination_grace_period_seconds: 600
  register: mongod_set

- name: "[MONGODB-APB][{{ mode | upper }}] Wait for MongoDB to be ready"
  wait_for:
    port: 27017
    host: "{{ mongodb_svc.service.spec.cluster_ip }}"
    timeout: 300
  when: state == "present"


